<?php

namespace Tests\Unit;

use App\Exceptions\RouteNotFoundException;
use App\Router;
use PHPUnit\Framework\TestCase;

class RouterTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->router = new Router();
    }

    public function test_it_registers_a_route() : void
    {
        //give a router obj
//        $router = new Router();

        //call register
        $this->router->register('get', '/users', ['Users', 'index']);

        $expected = [
            'get' => [
                '/users' => ['Users', 'index']
            ]
        ];

        //assert
        $this->assertEquals($expected, $this->router->routes());
    }

    /** @test */
    public function it_registers_get_route()
    {
//        $router = new Router();

        $this->router->get('/users', ['Users', 'index']);

        $expected = [
            'get' => [
                '/users' => ['Users', 'index']
            ]
        ];

        $this->assertEquals($expected, $this->router->routes());
    }

    /** @test */
    public function it_registers_post_route()
    {
//        $router = new Router();

        $this->router->post('/users', ['Users', 'store']);

        $expected = [
            'post' => [
                '/users' => ['Users', 'store']
            ]
        ];

        $this->assertEquals($expected, $this->router->routes());
    }

    public function test_no_routes_when_router_created()
    {
//        $router = new Router();

        $this->assertEmpty((new Router())->routes());
    }

    /**
     * @test
     * @dataProvider \Tests\DataProviders\RouterDataProvider::routeNotFoundCases()
     */
    public function it_throws_route_not_found_exception(
        string $requestUri,
        string $requestMethod
    ): void {
        $users = new class() {
            public function delete(): bool
            {
                return true;
            }
        };

        $this->router->post('/users', [$users::class, 'store']);
        $this->router->get('/users', ['Users', 'index']);

        $this->expectException(RouteNotFoundException::class);
        $this->router->resolve($requestUri, $requestMethod);
    }

    /** @test */
    public function is_recolved_route_from_a_clouser()
    {
        $this->router->get('/users', fn() => [1, 2 ,3]);

        $this->assertEquals(
            [1, 2, 3], $this->router->resolve('/users', 'get')
        );
    }

    /** @test */
    public function it_resolves_route()
    {
        $users = new class() {
            public function init(): array
            {
                return [1, 2, 3];
            }
        };

        $this->router->get('/users', [$users::class, 'init']);
        $this->assertEquals([1, 2, 3], $this->router->resolve('/users', 'get'));
    }

}